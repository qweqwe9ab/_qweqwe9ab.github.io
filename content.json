{"meta":{"title":"밤에 하는 개발.","subtitle":"BamDev","description":null,"author":"bamdev","url":"http://qweqwe9ab.github.io"},"pages":[],"posts":[{"title":"[자료구조][자바스크립트] 연결리스트(linked list)","slug":"Javascript-Linked-List","date":"2019-01-17T08:40:16.000Z","updated":"2019-01-17T10:43:30.416Z","comments":true,"path":"2019/01/17/Javascript-Linked-List/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/17/Javascript-Linked-List/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273const linkedListNode = class LinkedListNode &#123; constructor(value, next = null) &#123; this.value = value; this.next = next; &#125;&#125;const linkedList = class LinkedList &#123; constructor() &#123; this.head = null; this.length = 0; &#125; append(value) &#123; const node = new linkedListNode(value); let current = this.head; if (!current) &#123; // 리스트가 비어있음 this.head = node; this.length++; return node; &#125; else &#123; while (current.next) &#123; //리스트의 끝을 찾아서 current = current.next; &#125; current.next = node; //끝에 추가 this.length++; return node; &#125; &#125; find(position) &#123; let current = this.head; let count = 0; while (count &lt; position) &#123; current = current.next; count++; &#125; return current? current.value : null; &#125; delete(position) &#123; let current = this.head; let before; let remove; let count = 0; if (position == 0) &#123; //제일 앞 삭제 remove = this.head; this.head = this.head.next; this.length--; return remove; &#125; else &#123; console while (count &lt; position) &#123; before = current; count++; current = current.next; &#125; remove = current; before.next = remove? remove.next : null; this.length--; return remove; &#125; &#125;&#125;let testLink = new linkedList();console.log(testLink);testLink.append(3);console.log(testLink)testLink.append(4);console.log(testLink)console.log(testLink.delete(1))console.log(testLink) 12345678LinkedList &#123; head: null, length: 0 &#125;LinkedList &#123; head: LinkedListNode &#123; value: 3, next: null &#125;, length: 1 &#125;LinkedList &#123; head: LinkedListNode &#123; value: 3, next: LinkedListNode &#123; value: 4, next: null &#125; &#125;, length: 2 &#125;LinkedListNode &#123; value: 4, next: null &#125;LinkedList &#123; head: LinkedListNode &#123; value: 3, next: null &#125;, length: 1 &#125; Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"Javascript","slug":"Dev/Javascript","permalink":"http://qweqwe9ab.github.io/categories/Dev/Javascript/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"javascript","slug":"javascript","permalink":"http://qweqwe9ab.github.io/tags/javascript/"},{"name":"datastructure","slug":"datastructure","permalink":"http://qweqwe9ab.github.io/tags/datastructure/"},{"name":"etc","slug":"etc","permalink":"http://qweqwe9ab.github.io/tags/etc/"},{"name":"interview","slug":"interview","permalink":"http://qweqwe9ab.github.io/tags/interview/"},{"name":"linkedlist","slug":"linkedlist","permalink":"http://qweqwe9ab.github.io/tags/linkedlist/"}]},{"title":"[자료구조][자바스크립트] 큐(Queue)","slug":"Javascript-Queue","date":"2019-01-17T08:40:01.000Z","updated":"2019-01-17T10:43:23.597Z","comments":true,"path":"2019/01/17/Javascript-Queue/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/17/Javascript-Queue/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132function createQueue() &#123; const queue = []; return &#123; enqueue(item) &#123; queue.unshift(item); &#125;, dequeue() &#123; return queue.pop(); &#125;, peek() &#123; return queue[queue.length -1]; &#125;, get length() &#123; return queue.length; &#125;, isEmpty() &#123; return queue.length === 0; &#125; &#125;&#125;const q = createQueue();q.enqueue(1);q.enqueue(2);q.enqueue(3);q.enqueue(4);console.log(q.isEmpty());console.log(q.length)console.log(q.dequeue());console.log(q.length)console.log(q.peek())console.log(q.length) 123456false41323 Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"Javascript","slug":"Dev/Javascript","permalink":"http://qweqwe9ab.github.io/categories/Dev/Javascript/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"javascript","slug":"javascript","permalink":"http://qweqwe9ab.github.io/tags/javascript/"},{"name":"datastructure","slug":"datastructure","permalink":"http://qweqwe9ab.github.io/tags/datastructure/"},{"name":"etc","slug":"etc","permalink":"http://qweqwe9ab.github.io/tags/etc/"},{"name":"interview","slug":"interview","permalink":"http://qweqwe9ab.github.io/tags/interview/"},{"name":"queue","slug":"queue","permalink":"http://qweqwe9ab.github.io/tags/queue/"}]},{"title":"REST API","slug":"Rest-API","date":"2019-01-17T08:12:02.000Z","updated":"2019-01-17T08:27:31.988Z","comments":true,"path":"2019/01/17/Rest-API/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/17/Rest-API/","excerpt":"","text":"REST API REST (Representational State Transfer) web의 장점을 최대한 활용할 수 있는 아키텍쳐 HTTP 메서드 메서드 의미 멱등성 POST Create x GET Select O PUT Update O DELETE Delete O 멱등성 : 연산을 여러번해도 달라지지 않는것. REST는 상태 없이 API를 수행한다 그래서 여러 API를 호출하다 실패시 복구해야 하는데 멱등성 메서드는 복구가 필요없다. REST는 리소스 지향으로 모든 것은 명사로 표현한다. 각 세부 리소스에는 ID를 추가한다. REST API의 특성 유니폼 인터페이스 : 표준만 따르면 어떤 기술이라도 사용가능 무상태성 / 스테이트리스 : 서버는 상태를 저장하지 않으므로 각 API 서버는 들어오는 요청만 수행, 구현이 단순 캐슁가능 : HTTP에서 제공하는 캐슁 가능 자체 표현구조 : REST API만 보고 쉽게 이해할 수 있다. Client - Server 구조 : 서버는 API를 제공하고 클라이언트는 세션, 로그인 정보등을 직접 관리 계층형 구조 참고자료API 디자인REST API 제대로 알고 사용하기 Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"Etc","slug":"Dev/Etc","permalink":"http://qweqwe9ab.github.io/categories/Dev/Etc/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"etc","slug":"etc","permalink":"http://qweqwe9ab.github.io/tags/etc/"},{"name":"interview","slug":"interview","permalink":"http://qweqwe9ab.github.io/tags/interview/"},{"name":"이직","slug":"이직","permalink":"http://qweqwe9ab.github.io/tags/이직/"},{"name":"restapi","slug":"restapi","permalink":"http://qweqwe9ab.github.io/tags/restapi/"}]},{"title":"http와 https","slug":"http-vs-https","date":"2019-01-17T07:15:54.000Z","updated":"2019-01-17T08:25:29.373Z","comments":true,"path":"2019/01/17/http-vs-https/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/17/http-vs-https/","excerpt":"","text":"Related Postshttp (Hyper Text Transfer Protocol) Client와 Server가 메세지를 주고 받는 통신 규약 http://로 시작 메세지를 암호화 하지 않음 https (Hyper Text Transfer Protocol Secure Socket Layer) Client와 Server가 메세지를 주고 받는 통신 규약 https://로 시작 메세지를 암호화함 공개키, 개인키 암호화 SSL 인증서 구입 비용과 갱신 비용이 비싸다 암호화로 속도가 느리다 Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"Etc","slug":"Dev/Etc","permalink":"http://qweqwe9ab.github.io/categories/Dev/Etc/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"etc","slug":"etc","permalink":"http://qweqwe9ab.github.io/tags/etc/"},{"name":"interview","slug":"interview","permalink":"http://qweqwe9ab.github.io/tags/interview/"},{"name":"이직","slug":"이직","permalink":"http://qweqwe9ab.github.io/tags/이직/"},{"name":"http","slug":"http","permalink":"http://qweqwe9ab.github.io/tags/http/"},{"name":"https","slug":"https","permalink":"http://qweqwe9ab.github.io/tags/https/"}]},{"title":"2019년도 계획.","slug":"2019-Plan","date":"2019-01-14T09:07:26.000Z","updated":"2019-01-14T10:34:18.455Z","comments":true,"path":"2019/01/14/2019-Plan/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/14/2019-Plan/","excerpt":"","text":"Related Posts2018..2019년의 계획을 세우기 전에 2018년을 돌아보면 정신적으로 힘들일의 연속이였다.오래 일하던 회사 사정으로 갑자기 이직을 준비해야 하는 상황이 주어졌다.여러 가지 일들로 정신력이 탈탈 털리고 아직 정신을 회복하고 있다. 그래도 2019년에는 좋은일이 많을 거라고 예상하면서 2019년 계획을 세워보기로 한다. 이직 새로운 언어 공부 javascript 더 집중적으로 공부 블로그 시작하기 다이어트 유튜브 시작하기 github에 코드 올리기 개인 프로젝트 진행 우선 이직이 제일 급한 문제이기 때문에 이직에 관련된 글들을 많이 작성할 예정입니다.면접 질문, 알고리즘, 자료구조 등등 하루에 하나 정도는 올리는 게 목표인데 어떻게 될지는 모르겠다. Related Posts","categories":[{"name":"Etc","slug":"Etc","permalink":"http://qweqwe9ab.github.io/categories/Etc/"},{"name":"Plan","slug":"Etc/Plan","permalink":"http://qweqwe9ab.github.io/categories/Etc/Plan/"}],"tags":[{"name":"etc","slug":"etc","permalink":"http://qweqwe9ab.github.io/tags/etc/"},{"name":"plan","slug":"plan","permalink":"http://qweqwe9ab.github.io/tags/plan/"},{"name":"2019","slug":"2019","permalink":"http://qweqwe9ab.github.io/tags/2019/"},{"name":"계획","slug":"계획","permalink":"http://qweqwe9ab.github.io/tags/계획/"}]},{"title":"[jstips] 중첩된 조건문 개선 if, switch","slug":"improve-nested-conditionals","date":"2019-01-14T09:04:48.000Z","updated":"2019-01-14T11:06:04.832Z","comments":true,"path":"2019/01/14/improve-nested-conditionals/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/14/improve-nested-conditionals/","excerpt":"","text":"중첩된 조건문 개선 jstips에서 javascript를 사용할 때 중첩된 if문을 조금 더 깔끔하고 효율적으로 만들 수 있을지에 대해서 읽었습니다. 1234567891011121314if (color) &#123; if (color === 'black') &#123; printBlackBackground(); &#125; else if (color === 'red') &#123; printRedBackground(); &#125; else if (color === 'blue') &#123; printBlueBackground(); &#125; else if (color === 'green') &#123; printGreenBackground(); &#125; else &#123; printYellowBackground(); &#125;&#125; 우선 중첩된 if문을 개선하는 방법 중에 하나는 switch문을 사용하는 것입니다.switch문을 사용하면 더 짧고 깔끔하게 만들 수 잇지만 break;를 생략하는 것과 같은 오류를 디버깅하기에 어렵기 때문에 사용하지 않는 것이 좋습니다.123456789101112131415161718switch(color) &#123; case 'black': printBlackBackground(); break; case 'red': printRedBackground(); break; case 'blue': printBlueBackground(); break; case 'green': printGreenBackground(); break; default: printYellowBackground();&#125; 조건문에 여러 가지 조건이 들어가는 경우에도 조건문을 짧고 깔끔하게 쓰고 싶다면 switch를 사용할 수 있습니다.이 경우에는 switch문의 파라미터로 true를 넣고, case에 아래처럼 조건을 넣으면 가능합니다.123456789101112131415161718switch(true) &#123; case (typeof color === 'string' &amp;&amp; color === 'black'): printBlackBackground(); break; case (typeof color === 'string' &amp;&amp; color === 'red'): printRedBackground(); break; case (typeof color === 'string' &amp;&amp; color === 'blue'): printBlueBackground(); break; case (typeof color === 'string' &amp;&amp; color === 'green'): printGreenBackground(); break; case (typeof color === 'string' &amp;&amp; color === 'yellow'): printYellowBackground(); break;&#125; 리팩토링 같은 걸 생각할 필요가 없다면, 각 색의 함수를 만드는 것 대신에 색을 인수로 갖는 함수를 만들어서 해결할 수도 있습니다.123456function printBackground(color) &#123; if (!color || typeof color !== 'string') &#123; return; // Invalid color, return immediately &#125;&#125; 그러나 만약 리팩토링도 생각해야 한다면, 여러번 조건을 확인하고 swtich문을 사용하는 것을 피해야 합니다. 결론 중첩된 if문을 개선하는 가장 효율 적인 방법은 object를 사용하는 방법입니다. 123456789101112var colorObj = &#123; 'black': printBlackBackground, 'red': printRedBackground, 'blue': printBlueBackground, 'green': printGreenBackground, 'yellow': printYellowBackground&#125;;if (color in colorObj) &#123; colorObj[color]();&#125; Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"javascript","slug":"Dev/javascript","permalink":"http://qweqwe9ab.github.io/categories/Dev/javascript/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"javascript","slug":"javascript","permalink":"http://qweqwe9ab.github.io/tags/javascript/"},{"name":"jstips","slug":"jstips","permalink":"http://qweqwe9ab.github.io/tags/jstips/"}]},{"title":"[jstips] 배열에 요소 추가하기 push(),concat(),unshift()","slug":"insert-item-inside-an-array","date":"2019-01-14T09:01:39.000Z","updated":"2019-01-14T10:36:48.601Z","comments":true,"path":"2019/01/14/insert-item-inside-an-array/","link":"","permalink":"http://qweqwe9ab.github.io/2019/01/14/insert-item-inside-an-array/","excerpt":"","text":"오늘은 jstips에서 첫 번째 팁인 배열에 요소 추가하는 방법을 공부해보겠습니다. 저도 개발을 하다 보면 배열에 요소를 추가하는 작업을 많이 하게 되는데, push()를 사용해서 배열의 끝에 요소를 넣고, unshift를 사용해서 배열의 시작 부분에 요소를 넣고, splice를 사용해서 배열의 중간에 요소를 넣는 것은 알고 그렇게 작업을 했었습니다.근데 jstips에서 글을 읽으면서 속도와 성능을 생각하면서 작업을 하는 것도 필요할 것 같다는 생각이 들었습니다. 귀찮은 분들을 위해 맨 아래에 결론을 적어놨습니다! 배열의 끝부분에 추가 배열의 끝에 요소를 추가하는 방법 중 제일 쉬운 방법은 push().aspx)를 사용하는 것인데, 다른 방법들도 있다. 123456var arr = [1,2,3,4,5];var arr2 = [];arr.push(6);arr[arr.length] = 6;arr2 = arr.concat([6]); // concat은 배열을 반환한다. 모바일에서의 성능Android (v.4.2.2) arr.push(6); and arr[arr.length] = 6; 비슷한 성능을 보인다. //3,319,694 ops/sec arr2 = arr.concat([6[); 다른 두가지 방법보다 50ㅋ.61% 느리다. Chrome Mobile (v33.0.0) arr[arr.length] = 6; //6,125,975 ops/sec arr.push(6); 66.74% 느리다. arr2 = arr.concat([6]); 49.78% 느리다. Safari Mobile (v9) arr[arr.length] = 6; //7,452,898 ops/sec arr.push(6); 40.19 % 느리다. arr2 = arr.concat([6]); 49.78% 느리다. 최종 순위 arr[arr.length] = 6; //평균 5,632,856 ops/sec arr.push(6); // 35.64% 더 느리다. arr2 = arr.concat([6]); // 62.67% 더 느리다. 데스크탑에서의 성능Chrome (v48.0.2564) arr[arr.length] = 6; // 21,601,722 ops/sec arr.push(6); 61.94 % 더 느리다. arr2 = arr.concat([6]); 87.45% 더 느리다. Firefox (v44) arr[arr.length] = 6; //56,032,805 ops/sec arr.push(6); 0.52 % 더 느리다. arr2 = arr.concat([6]); 87.36% 더 느리다. IE (v11) arr[arr.length] = 6; //67,197,046 ops/sec arr.push(6); 39.61 % 더 느리다. arr2 = arr.concat([6]); 93.41% 더 느리다. Opera (v35.0.2066.68) arr[arr.length] = 6; // 30,775,071 ops/sec arr.push(6); 71.60 % 더 느리다. arr2 = arr.concat([6]); 83.70% 더 느리다. Safari (v9.0.3) arr[arr.length] = 6; //42,670,978 ops/sec arr.push(6); 0.80 % 더 느리다. arr2 = arr.concat([6]); 76.07% 더 느리다. 최종 순위 arr[arr.length] = 6; //평균 42,345,449 ops/sec arr.push(6); //34.66 % 더 느리다. arr2 = arr.concat([6]); //85.79% 더 느리다. 배열의 앞부분에 추가 1234var arr = [1,2,3,4,5];arr.unshift(0);[0].concat(arr); 여기서 주의할 점은 unshift는 원래의 배열을 수정하고, concat은 새로운 배열을 반환한다. 모바일에서의 성능Android (v4.2.2) [0].concat(arr); // 1,808,717 ops/sec arr.unshift(0); 98.85% 더 느리다. Chrome Mobile (v33.0.0) [0].concat(arr); // 1,269,498 ops/sec arr.unshift(0); 99.86% 더 느리다. Safari Mobile(v9) [0].concat(arr); // 3,250,184 ops/sec arr.unshift(0); 33.67% 더 느리다. 최종 순위1.[0].concat(arr); //평균 4,972,622 ops/sec2.arr.unshift(0); // 64.70% 더 느리다. 데스크탑에서의 성능Chrome (v48.0.2564) [0].concat(arr); // 2,656,685 ops/sec arr.unshift(0); 96.77% 더 느리다. Firefox (v44) [0].concat(arr); // 8,039,759 ops/sec arr.unshift(0); 99.72% 더 느리다. IE (v11) [0].concat(arr); // 3,604,226 ops/sec arr.unshift(0); 98.31% 더 느리다. Opera (v35.0.2066.68) [0].concat(arr); // 4,102,128 ops/sec arr.unshift(0); 97.44% 더 느리다. Safari (v9.0.3) [0].concat(arr); // 12,356,477 ops/sec arr.unshift(0); 15.17% 더 느리다. 최종 순위1.[0].concat(arr); // 평균 6,032,573 ops/sec2.arr.unshift(0); // 78.65% 더 느리다. 배열의 중간에 추가 배열의 중간에 요소를 삽입하는 방법중 splice가 제일 쉽고 가장 효율적인 방법이다.12var items = ['one','two','three','four'];items.splice(itmes.length/2, 0,'hello'); 결론배열의 맨 뒤에 추가할 때는 arr[arr.length]를 사용.배열의 맨 앞에 추가할 때는 concat을 사용.배열 중간에 추가할 때는 splice을 사용. 참고insert-item-inside-an-arrayspliceconcatunshiftpush Related Posts","categories":[{"name":"Dev","slug":"Dev","permalink":"http://qweqwe9ab.github.io/categories/Dev/"},{"name":"javascript","slug":"Dev/javascript","permalink":"http://qweqwe9ab.github.io/categories/Dev/javascript/"}],"tags":[{"name":"dev","slug":"dev","permalink":"http://qweqwe9ab.github.io/tags/dev/"},{"name":"javascript","slug":"javascript","permalink":"http://qweqwe9ab.github.io/tags/javascript/"},{"name":"jstips","slug":"jstips","permalink":"http://qweqwe9ab.github.io/tags/jstips/"}]}]}