<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>밤에 하는 개발</title>
  
  <subtitle>밤에 하는 개발</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qweqwe9ab.github.io/"/>
  <updated>2019-01-20T10:56:03.651Z</updated>
  <id>http://qweqwe9ab.github.io/</id>
  
  <author>
    <name>밤에 하는 개발</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[javascript] 하노이 탑 (Hanoi Tower)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/20/Hanoi/"/>
    <id>http://qweqwe9ab.github.io/2019/01/20/Hanoi/</id>
    <published>2019-01-20T09:29:32.000Z</published>
    <updated>2019-01-20T10:56:03.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="하노이-탑"><a href="#하노이-탑" class="headerlink" title="하노이 탑"></a>하노이 탑</h2><p>하노이 탑은 다음과 같은 조건을 가지고 있다.</p><ul><li>한번에 하나의 원판만 이동</li><li>맨위에 있는 원판만 이동 가능</li><li>작은 원판 위에 큰 원판을 올리는 것은 불가능</li><li>중간의 막대는 임시적으로 이용 가능</li></ul><img src="/2019/01/20/Hanoi/hanoi.jpg"><p><code>n-1</code>개를 A에서 B로 이동하고,<br><code>n</code>개를 A에서 C로 이동한다.<br>그리고 <code>n-1</code>개를 B에서 C로 이동한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hanoi = <span class="function">(<span class="params">n, <span class="keyword">from</span>, temp, to</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>을 <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>에서 <span class="subst">$&#123;to&#125;</span>로 이동`</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>, <span class="keyword">from</span>, to, temp);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>을 <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>에서 <span class="subst">$&#123;to&#125;</span>로 이동`</span>);</span><br><span class="line">        hanoi(n<span class="number">-1</span>, temp, <span class="keyword">from</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hanoi(<span class="number">5</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1을 A에서 C로 이동</span><br><span class="line">2을 A에서 B로 이동</span><br><span class="line">1을 C에서 B로 이동</span><br><span class="line">3을 A에서 C로 이동</span><br><span class="line">1을 B에서 A로 이동</span><br><span class="line">2을 B에서 C로 이동</span><br><span class="line">1을 A에서 C로 이동</span><br><span class="line">4을 A에서 B로 이동</span><br><span class="line">1을 C에서 B로 이동</span><br><span class="line">2을 C에서 A로 이동</span><br><span class="line">1을 B에서 A로 이동</span><br><span class="line">3을 C에서 B로 이동</span><br><span class="line">1을 A에서 C로 이동</span><br><span class="line">2을 A에서 B로 이동</span><br><span class="line">1을 C에서 B로 이동</span><br><span class="line">5을 A에서 C로 이동</span><br><span class="line">1을 B에서 A로 이동</span><br><span class="line">2을 B에서 C로 이동</span><br><span class="line">1을 A에서 C로 이동</span><br><span class="line">3을 B에서 A로 이동</span><br><span class="line">1을 C에서 B로 이동</span><br><span class="line">2을 C에서 A로 이동</span><br><span class="line">1을 B에서 A로 이동</span><br><span class="line">4을 B에서 C로 이동</span><br><span class="line">1을 A에서 C로 이동</span><br><span class="line">2을 A에서 B로 이동</span><br><span class="line">1을 C에서 B로 이동</span><br><span class="line">3을 A에서 C로 이동</span><br><span class="line">1을 B에서 A로 이동</span><br><span class="line">2을 B에서 C로 이동</span><br><span class="line">1을 A에서 C로 이동</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;하노이-탑&quot;&gt;&lt;a href=&quot;#하노이-탑&quot; class=&quot;headerlink&quot; title=&quot;하노이 탑&quot;&gt;&lt;/a&gt;하노이 탑&lt;/h2&gt;&lt;p&gt;하노이 탑은 다음과 같은 조건을 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한번에 하나의 원판만 이동&lt;/li&gt;
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="fibonacci" scheme="http://qweqwe9ab.github.io/tags/fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] 피보나치 (Fibonacci)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/20/Fibonacci/"/>
    <id>http://qweqwe9ab.github.io/2019/01/20/Fibonacci/</id>
    <published>2019-01-20T08:53:44.000Z</published>
    <updated>2019-01-20T09:07:56.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="피보나치-수열"><a href="#피보나치-수열" class="headerlink" title="피보나치 수열"></a>피보나치 수열</h2><p><code>0, 1, 1, 2, 3, 5, 8, 13, 21....</code><br>피보나치는 0번째는 0, 첫 번째는 1 그 이후로는 이전 두개의 수를 더한 값을 갖는 수열이다.</p><p>F(0) = 0, F(1) = 1, F(n) = F(n-2) + F(n-1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fib = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) <span class="keyword">return</span> num;</span><br><span class="line">    <span class="keyword">return</span> fib(num<span class="number">-1</span>) + fib(num<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>재귀함수로 구현하면 간단하지만, 같은 계산을 여러번 진행하기 때문에 좋지는 않다.</p><p>그래서 반복문으로 변경할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fib = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) <span class="keyword">return</span> num;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;</span><br><span class="line">           <span class="keyword">let</span> tmp = current;</span><br><span class="line">           current = current + last;</span><br><span class="line">           last = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;피보나치-수열&quot;&gt;&lt;a href=&quot;#피보나치-수열&quot; class=&quot;headerlink&quot; title=&quot;피보나치 수열&quot;&gt;&lt;/a&gt;피보나치 수열&lt;/h2&gt;&lt;p&gt;&lt;code&gt;0, 1, 1, 2, 3, 5, 8, 13, 21....&lt;/code&gt;&lt;br&gt;피보
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="fibonacci" scheme="http://qweqwe9ab.github.io/tags/fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>동기와 비동기</title>
    <link href="http://qweqwe9ab.github.io/2019/01/19/Sync-VS-Async/"/>
    <id>http://qweqwe9ab.github.io/2019/01/19/Sync-VS-Async/</id>
    <published>2019-01-19T08:42:36.000Z</published>
    <updated>2019-01-19T09:14:58.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><h3 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h3><p>여러작업을 진행 할때 하나의 작업이 끝날때 까지 기다렸다가 다음 작업을 진행하는 것. </p><h3 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h3><p>여러작업을 진행 할때 하나의 작업을 실행하고 다음 작업으로 넘어간다.<br>이전에 실행한 작업은 작업이 끝나고 <code>callback</code>을 넘긴다.</p><h3 id="비유"><a href="#비유" class="headerlink" title="비유"></a>비유</h3><p>간단하게 설명하면 <code>동기</code>는 카페에서 손님에게 주문을 받고 커피를 만들어서 전달하고 다음 손님으로 넘어가는 것 이고 <code>비동기</code>는 카페에서 손님에게 주문을 받고 진동벨을 준 다음 다음 손님의 주문으로 넘어가고, 손님의 커피가 제조가 완료되면 진동벨(callback)을 울려 해당 손님에게 전달한다. </p><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><p>동기 코드<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">'/file.md'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 </span></span><br><span class="line"><span class="comment">// data..</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>비동기 코드<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">fs.readFile(<span class="string">'/file.md'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// data..</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>동기 코드는 우리가 생각하는 순서대로 결과가 나온다.<br>비동기 코드는 우리의 생각과 다르게 <code>fs.readFile</code>를 처리하는 동안 다음으로 넘어가서 <code>3</code>이 출력되고 함수가 다 처리되면 callback함수의 처리가 이루어진다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback" target="_blank" rel="noopener">node</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;설명&quot;&gt;&lt;a href=&quot;#설명&quot; class=&quot;headerlink&quot; title=&quot;설명&quot;&gt;&lt;/a&gt;설명&lt;/h2&gt;&lt;h3 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; title=&quot;동기&quot;&gt;&lt;/a&gt;동기&lt;/h3&gt;&lt;p&gt;여러작
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="nodejs" scheme="http://qweqwe9ab.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>프로세스(Process) vs 쓰레드(Thread)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/19/Process-VS-Thread/"/>
    <id>http://qweqwe9ab.github.io/2019/01/19/Process-VS-Thread/</id>
    <published>2019-01-19T08:09:10.000Z</published>
    <updated>2019-01-19T08:37:43.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h2><ul><li>프로세스는 실행중인 프로그램이다.</li><li>디스크로에서 메모리로 적재되어 CPU의 할당을 받을 수 있다.</li></ul><h2 id="쓰레드"><a href="#쓰레드" class="headerlink" title="쓰레드"></a>쓰레드</h2><ul><li>프로세스의 실행단위</li><li>한 프로세스 내에서 동작되는 여러 실행으로 프로세스내의 주소공간이나 자원을 공유한다.</li></ul><h3 id="멀티-쓰레드"><a href="#멀티-쓰레드" class="headerlink" title="멀티 쓰레드"></a>멀티 쓰레드</h3><ul><li>메모리 공간과 시스템 자원 소모가 줄어들게 된다.</li><li>쓰레드 간의 공유된 자원을 사용해 쓰레드간의 통신이 간단하고 빠르다</li></ul><h3 id="멀티-쓰레드-문제점"><a href="#멀티-쓰레드-문제점" class="headerlink" title="멀티 쓰레드 문제점"></a>멀티 쓰레드 문제점</h3><ul><li>자원을 공유하기 때문에 신경을 써야한다.</li><li>동기화 작업으로 인해 성능이 저하될 수 있다.</li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><p><code>프로세스</code>는 운영체제로 부터 자원을 할당받는 자원단위(실행중인 프로그램)<br><code>쓰레드</code>는 프로세스가 할당 받은 자원을 이용하는 실행 단위()</p><p><code>멀티 쓰레드</code>는 적은 메모리 사용과 빠르지만 자원을 공유해 신경쓸 것이 많다. <code>멀트 프로세스</code>는 자원을 많이 사용하지만 공유된 자원이 없어 신경쓸 것이 적다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로세스&quot;&gt;&lt;a href=&quot;#프로세스&quot; class=&quot;headerlink&quot; title=&quot;프로세스&quot;&gt;&lt;/a&gt;프로세스&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로세스는 실행중인 프로그램이다.&lt;/li&gt;
&lt;li&gt;디스크로에서 메모리로 적재되어 CPU의 할당을 받을
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Etc" scheme="http://qweqwe9ab.github.io/categories/Dev/Etc/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조][자바스크립트] 스택으로 큐 구현 javascript</title>
    <link href="http://qweqwe9ab.github.io/2019/01/18/Queue-Using-Stacks/"/>
    <id>http://qweqwe9ab.github.io/2019/01/18/Queue-Using-Stacks/</id>
    <published>2019-01-18T06:46:22.000Z</published>
    <updated>2019-01-18T08:41:48.874Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다.<br>스택(<a href="/2019/01/16/Javascript-Stack/" title="[자료구조][자바스크립트] 스택(Stack)">[자료구조][자바스크립트] 스택(Stack)</a>)은 LIFO - Last In First Out 방식이다.<br>간단하게 설명하면 책상 위에 책을 하나씩 쌓아두고 위에서부터 하나씩 집어서 읽는 것이다.</p><ul><li>나중에 쌓은(제일 위에 있는) 책을 먼저 집어서 읽는 방식</li></ul><p>큐(<a href="/2019/01/16/Javascript-Queue/" title="[자료구조][자바스크립트] 큐(Queue)">[자료구조][자바스크립트] 큐(Queue)</a>)는  FIFO - First In First Out 방식이다.<br>간단하게 설명하면 카페에서 한 줄로 서서 주문을 하는 것이다.</p><ul><li>제일 먼저 온 사람이 먼저 계산하는 방식</li></ul><p>스택과 큐에 대한 설명과 코드는 이 블로그의 글을 참조하고, 오늘은 스택으로 큐를 구현해 보겠습니다.</p><h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>스택을 사용하여 큐를 구현하여라</p><ul><li>enqueue</li><li>dequeue</li><li>peek</li><li>length</li><li>isEmpty</li></ul><h3 id="힌트"><a href="#힌트" class="headerlink" title="힌트"></a>힌트</h3><p>스택으로 큐를 구현하기 위해서는 스택을 두 개 사용하여야 한다.<br>하나는 inStack(enqueue시 쌓이는 스택), 다른 하나는 outStack(dequeue시 꺼내는 스택)</p><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><h4 id="Enqueue"><a href="#Enqueue" class="headerlink" title="Enqueue"></a>Enqueue</h4><ul><li>outStack이 비어있는지 확인하고, outStack에 data가 있다면, inStack으로 옮겨준다.</li><li>outStack이 비어있다면, inStack에 데이터를 넣는다.</li></ul><h4 id="Dequeue"><a href="#Dequeue" class="headerlink" title="Dequeue"></a>Dequeue</h4><ul><li>inStack이 비어있는지 확인하고, inStack에 data가 있다면, outStack으로 옮겨준다.</li><li>inStack이 비어있다면, outStack에서 data를 뽑는다.</li></ul><h3 id="Enqueue-설명"><a href="#Enqueue-설명" class="headerlink" title="Enqueue 설명"></a>Enqueue 설명</h3><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack1.jpg"><p>stack을 두개를 만든다.<br>하나는 Enqueue할 때 사용하는 inStack, 다른 하나는 Dequeue할 때 사용하는 outStack.</p><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack2.jpg"><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack3.jpg"><p>outStack이 비어있다면, inStack에 데이터를 넣는다.</p><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack4.jpg"><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack2.jpg"><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack3.jpg"><p>inStack이 비어있는지 확인하고, inStack에 data가 있다면, outStack으로 옮겨주고 data를 inStack으로 넣는다.</p><h3 id="Dequeue-설명"><a href="#Dequeue-설명" class="headerlink" title="Dequeue 설명"></a>Dequeue 설명</h3><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack7.jpg"><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack5.jpg"><p>inStack이 비어있는지 확인하고, inStack에 data가 있다면, outStack으로 옮겨준다.</p><img src="/2019/01/18/Queue-Using-Stacks/queueusingStack6.jpg"><p>inStack이 비어있다면, outStack에서 data를 뽑는다.</p><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><h4 id="javascript-로-구현"><a href="#javascript-로-구현" class="headerlink" title="javascript 로 구현"></a>javascript 로 구현</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> stackArray = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        push(item) &#123;</span><br><span class="line">            stackArray.push(item);</span><br><span class="line">        &#125;,</span><br><span class="line">        pop() &#123;</span><br><span class="line">            <span class="keyword">return</span> stackArray.pop();</span><br><span class="line">        &#125;,</span><br><span class="line">        peek() &#123;</span><br><span class="line">            <span class="keyword">return</span> stackArray[stackArray.length - <span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        get length() &#123;</span><br><span class="line">            <span class="keyword">return</span> stackArray.length;</span><br><span class="line">        &#125;,</span><br><span class="line">        isEmpty() &#123;</span><br><span class="line">            <span class="keyword">return</span> stackArray.length === <span class="number">0</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> inStack = stack();</span><br><span class="line">    <span class="keyword">const</span> outStack = stack();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        enqueue(item) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!outStack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!outStack.isEmpty()) &#123;</span><br><span class="line">                    inStack.push(outStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inStack.push(item);</span><br><span class="line">        &#125;,</span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            <span class="keyword">if</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                    outStack.push(inStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> outStack.pop();</span><br><span class="line">        &#125;,</span><br><span class="line">        peek() &#123;</span><br><span class="line">            <span class="keyword">if</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                    outStack.push(inStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> outStack.peek();</span><br><span class="line">        &#125;,</span><br><span class="line">        get length() &#123;</span><br><span class="line">            <span class="keyword">if</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!inStack.isEmpty()) &#123;</span><br><span class="line">                    outStack.push(inStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> outStack.length;</span><br><span class="line">        &#125;,</span><br><span class="line">        isEmpty() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.length === <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> q = queue();</span><br><span class="line"><span class="built_in">console</span>.log(q.isEmpty())</span><br><span class="line">q.enqueue(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(q.peek())</span><br><span class="line">q.enqueue(<span class="number">2</span>)</span><br><span class="line">q.enqueue(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(q.peek())</span><br><span class="line">q.enqueue(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(q.dequeue());</span><br><span class="line"><span class="built_in">console</span>.log(q.isEmpty())</span><br><span class="line"><span class="built_in">console</span>.log(q.dequeue());</span><br></pre></td></tr></table></figure><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다.&lt;br&gt;스택(&lt;a href=&quot;/2019/01/16/Javascript-Stack/&quot; title=&quot;[자료구조][자바스크립트] 스택(Stack)&quot;&gt;[자료구조][자바스크립트] 스택(Stack)&lt;/a&gt;
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="datastructure" scheme="http://qweqwe9ab.github.io/tags/datastructure/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="queue" scheme="http://qweqwe9ab.github.io/tags/queue/"/>
    
      <category term="stack" scheme="http://qweqwe9ab.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 주사위 게임 &quot;Greed is Good&quot;</title>
    <link href="http://qweqwe9ab.github.io/2019/01/18/Codewars-Greed-is-Good/"/>
    <id>http://qweqwe9ab.github.io/2019/01/18/Codewars-Greed-is-Good/</id>
    <published>2019-01-18T06:35:22.000Z</published>
    <updated>2019-01-18T06:45:22.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>주사위(1-6)를 굴려서 나온 수에 따른 점수를 매겨라.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Three 1<span class="string">'s =&gt; 1000 points</span></span><br><span class="line"><span class="string">Three 6'</span>s =&gt;  600 points</span><br><span class="line">Three 5<span class="string">'s =&gt;  500 points</span></span><br><span class="line"><span class="string">Three 4'</span>s =&gt;  400 points</span><br><span class="line">Three 3<span class="string">'s =&gt;  300 points</span></span><br><span class="line"><span class="string">Three 2'</span>s =&gt;  200 points</span><br><span class="line">One   1   =&gt;  100 points</span><br><span class="line">One   5   =&gt;   50 point</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Throw       Score</span><br><span class="line">---------   ------------------</span><br><span class="line">5 1 3 4 1   50 + 2 * 100 = 250</span><br><span class="line">1 1 1 3 1   1000 + 100 = 1100</span><br><span class="line">2 4 4 5 4   400 + 50 = 450</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params"> dice </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scores = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> dice) &#123;</span><br><span class="line">    <span class="keyword">if</span>(scores[dice[i]]) &#123;</span><br><span class="line">      scores[dice[i]]++;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      scores[dice[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> scores) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = scores[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">1000</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">2</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">200</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">300</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">4</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">400</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">500</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">6</span> &amp;&amp; s &gt;= <span class="number">3</span>) &#123;returnValue += <span class="number">600</span>; s -=<span class="number">3</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>) returnValue += s * <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span>) returnValue += s * <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다른-답"><a href="#다른-답" class="headerlink" title="다른 답"></a>다른 답</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params"> dice </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dc = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> tdr = [<span class="number">1000</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>];</span><br><span class="line">  <span class="keyword">var</span> sdr = [<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>];</span><br><span class="line">  dice.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; dc[x<span class="number">-1</span>]++; &#125;);</span><br><span class="line">  <span class="keyword">return</span> dc.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">s,x,i</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> s + (x &gt;= <span class="number">3</span>? tdr[i] : <span class="number">0</span>) + sdr[i]*(x % <span class="number">3</span>);</span><br><span class="line">  &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params"> dice </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> six=<span class="number">0</span>, five=<span class="number">0</span>, four=<span class="number">0</span>, three=<span class="number">0</span>, too=<span class="number">0</span>, one=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">6</span>) &#123; six++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">5</span>) &#123; five++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">4</span>) &#123; four++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">3</span>) &#123; three++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">2</span>) &#123; too++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (dice[i] == <span class="number">1</span>) &#123; one++; &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (one &gt; <span class="number">2</span>) &#123; r += <span class="number">1000</span>; one -= <span class="number">3</span>;&#125;</span><br><span class="line">  <span class="keyword">if</span> (six &gt; <span class="number">2</span>) &#123; r += <span class="number">600</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (five &gt; <span class="number">2</span>) &#123; r += <span class="number">500</span>; five -= <span class="number">3</span>;&#125;</span><br><span class="line">  <span class="keyword">if</span> (four &gt; <span class="number">2</span>) &#123; r += <span class="number">400</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (three &gt; <span class="number">2</span>) &#123; r += <span class="number">300</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (too &gt; <span class="number">2</span>) &#123; r += <span class="number">200</span>; &#125;</span><br><span class="line">  r += one * <span class="number">100</span>;</span><br><span class="line">  r += five * <span class="number">50</span>;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h3><h3 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h3><p><a href="https://www.codewars.com/kata/5503013e34137eeeaa001648/train/javascript" target="_blank" rel="noopener">codewars</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;설명&quot;&gt;&lt;a href=&quot;#설명&quot; class=&quot;headerlink&quot; title=&quot;설명&quot;&gt;&lt;/a&gt;설명&lt;/h3&gt;&lt;h3 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h3&gt;&lt;p&gt;주사위
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Codewars" scheme="http://qweqwe9ab.github.io/categories/Dev/Codewars/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="codingtest" scheme="http://qweqwe9ab.github.io/tags/codingtest/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 다이아몬드 모양 출력 &quot;Codewars_Give_me_a_Diamond&quot;</title>
    <link href="http://qweqwe9ab.github.io/2019/01/18/Codewars-Give-me-a-Diamond/"/>
    <id>http://qweqwe9ab.github.io/2019/01/18/Codewars-Give-me-a-Diamond/</id>
    <published>2019-01-17T19:57:35.000Z</published>
    <updated>2019-01-18T06:45:26.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>n을 입력받아서 다이아몬드 모양을 출력하는 문제</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diamond</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt; <span class="number">0</span> || n%<span class="number">2</span> ==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;(n-i)/<span class="number">2</span>;j++) returnValue += <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;i;j++)returnValue += <span class="string">'*'</span>;</span><br><span class="line">    returnValue +=<span class="string">'\n'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = n<span class="number">-2</span>; i&gt;<span class="number">0</span>; i-=<span class="number">2</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;(n-i)/<span class="number">2</span>;j++) returnValue += <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;i;j++)returnValue += <span class="string">'*'</span>;</span><br><span class="line">    returnValue +=<span class="string">'\n'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다른-답"><a href="#다른-답" class="headerlink" title="다른 답"></a>다른 답</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diamond</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( n%<span class="number">2</span>==<span class="number">0</span> || n&lt;<span class="number">1</span> ) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> x=<span class="number">0</span>, add, diam = line(x,n);</span><br><span class="line">  <span class="keyword">while</span>( (x+=<span class="number">2</span>) &lt; n )&#123;</span><br><span class="line">    add = line(x/<span class="number">2</span>,n-x);</span><br><span class="line">    diam = add+diam+add;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> diam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str,x</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Array</span>(x+<span class="number">1</span>).join(str); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">line</span>(<span class="params">spaces,stars</span>)</span>&#123; <span class="keyword">return</span> repeat(<span class="string">" "</span>,spaces)+repeat(<span class="string">"*"</span>,stars)+<span class="string">"\n"</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diamond</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span> || !(n % <span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">  <span class="keyword">const</span> middleIndex = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: n&#125;)</span><br><span class="line">      .map(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> indentation = <span class="built_in">Math</span>.abs(index - middleIndex);</span><br><span class="line">        <span class="keyword">const</span> numberOfAsterisks = n - indentation * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(indentation + <span class="number">1</span>).join(<span class="string">' '</span>) + <span class="built_in">Array</span>(numberOfAsterisks + <span class="number">1</span>).join(<span class="string">'*'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">'\n'</span>) + <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h3><h3 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h3><p><a href="https://www.codewars.com/kata/give-me-a-diamond/train/javascript" target="_blank" rel="noopener">codewars</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;설명&quot;&gt;&lt;a href=&quot;#설명&quot; class=&quot;headerlink&quot; title=&quot;설명&quot;&gt;&lt;/a&gt;설명&lt;/h3&gt;&lt;h3 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h3&gt;&lt;p&gt;n을 
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Codewars" scheme="http://qweqwe9ab.github.io/categories/Dev/Codewars/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="codingtest" scheme="http://qweqwe9ab.github.io/tags/codingtest/"/>
    
  </entry>
  
  <entry>
    <title>[Codewars] 후위표기법 문제 &quot;Reverse polish notation calculator&quot;</title>
    <link href="http://qweqwe9ab.github.io/2019/01/18/Codewars-Reverse-Polish-Notation-Calculator/"/>
    <id>http://qweqwe9ab.github.io/2019/01/18/Codewars-Reverse-Polish-Notation-Calculator/</id>
    <published>2019-01-17T19:24:18.000Z</published>
    <updated>2019-01-18T06:45:18.482Z</updated>
    
    <content type="html"><![CDATA[<p>우리가 알고있는 수식은 <code>5 + ((1 + 2) * 4) - 3</code> 같은 식이다.<br>하지만 후위표기법에서는 <code>5 1 2 + 4 * + 3 -</code>이런식으로 표현한다.</p><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>후위표기법으로 제공되는 식을 풀어 답을 리턴하시오.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">expr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> exp = expr.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">let</span> expStack = [];</span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> exp) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = exp[i];</span><br><span class="line">    <span class="keyword">let</span> num1;</span><br><span class="line">    <span class="keyword">let</span> num2;</span><br><span class="line">    <span class="keyword">if</span>(val == <span class="string">'+'</span> ||val == <span class="string">'-'</span> ||val == <span class="string">'*'</span> ||val == <span class="string">'/'</span>) &#123;</span><br><span class="line">      num1 = <span class="built_in">Number</span>(expStack.pop());</span><br><span class="line">      num2 = <span class="built_in">Number</span>(expStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(val) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">          expStack.push(num2 + num1); </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">          expStack.push(num2 - num1);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">         expStack.push(num2 * num1);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">         expStack.push(num2 / num1);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">          <span class="keyword">if</span>(val) expStack.push(val)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(expStack[<span class="number">0</span>]) || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다른-답"><a href="#다른-답" class="headerlink" title="다른 답"></a>다른 답</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> operands = &#123;</span><br><span class="line">  <span class="string">'+'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, a</span>) </span>&#123; <span class="keyword">return</span> a + b;&#125;,</span><br><span class="line">  <span class="string">'-'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, a</span>) </span>&#123; <span class="keyword">return</span> a - b;&#125;,</span><br><span class="line">  <span class="string">'*'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, a</span>) </span>&#123; <span class="keyword">return</span> a * b;&#125;,</span><br><span class="line">  <span class="string">'/'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, a</span>) </span>&#123; <span class="keyword">return</span> a / b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">expr</span>) </span>&#123;</span><br><span class="line">  expr = expr || <span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">return</span> +expr.split(<span class="regexp">/\s/g</span>).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">stack, current</span>) </span>&#123;</span><br><span class="line">      stack.push(operands[current] ? operands[current](+stack.pop(), +stack.pop()) : current);</span><br><span class="line">    <span class="keyword">return</span> stack;</span><br><span class="line">  &#125;, []).pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">expr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">var</span> atoms = expr.split(<span class="regexp">/\s+/</span>);</span><br><span class="line">  <span class="keyword">var</span> operators = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;atoms.length; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(atoms[i]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'+'</span>: result.push(result.pop() + result.pop()); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'-'</span>: result.push(-result.pop() + result.pop()); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'*'</span>: result.push(result.pop() * result.pop()); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/'</span>: result.push(<span class="number">1</span> /(result.pop() / result.pop())); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: result.push(<span class="built_in">parseFloat</span>(atoms[i]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.pop() || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h3><h3 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h3><p><a href="https://www.codewars.com/kata/52f78966747862fc9a0009ae/train/javascript" target="_blank" rel="noopener">codewars</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우리가 알고있는 수식은 &lt;code&gt;5 + ((1 + 2) * 4) - 3&lt;/code&gt; 같은 식이다.&lt;br&gt;하지만 후위표기법에서는 &lt;code&gt;5 1 2 + 4 * + 3 -&lt;/code&gt;이런식으로 표현한다.&lt;/p&gt;
&lt;h3 id=&quot;문제&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Codewars" scheme="http://qweqwe9ab.github.io/categories/Dev/Codewars/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="codingtest" scheme="http://qweqwe9ab.github.io/tags/codingtest/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조][자바스크립트] 연결리스트(linked list)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/17/Javascript-Linked-List/"/>
    <id>http://qweqwe9ab.github.io/2019/01/17/Javascript-Linked-List/</id>
    <published>2019-01-17T08:40:16.000Z</published>
    <updated>2019-01-17T11:07:34.057Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedListNode = <span class="class"><span class="keyword">class</span> <span class="title">LinkedListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value, next = null) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkedList = <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    append(value) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> linkedListNode(value);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (!current) &#123; <span class="comment">// 리스트가 비어있음</span></span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">            <span class="keyword">this</span>.length++;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (current.next) &#123; <span class="comment">//리스트의 끝을 찾아서</span></span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = node; <span class="comment">//끝에 추가</span></span><br><span class="line">            <span class="keyword">this</span>.length++;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find(position) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; position) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current? current.value : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>(position) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> before;</span><br><span class="line">        <span class="keyword">let</span> remove;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123; <span class="comment">//제일 앞 삭제</span></span><br><span class="line">            remove = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next;</span><br><span class="line">            <span class="keyword">this</span>.length--;</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span></span><br><span class="line">            <span class="keyword">while</span> (count &lt; position) &#123;</span><br><span class="line">                before = current;</span><br><span class="line">                count++;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            remove = current;</span><br><span class="line">            before.next = remove? remove.next : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.length--;</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testLink = <span class="keyword">new</span> linkedList();</span><br><span class="line"><span class="built_in">console</span>.log(testLink);</span><br><span class="line">testLink.append(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(testLink)</span><br><span class="line">testLink.append(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(testLink)</span><br><span class="line"><span class="built_in">console</span>.log(testLink.delete(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(testLink)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LinkedList &#123; head: null, length: 0 &#125;</span><br><span class="line">LinkedList &#123; head: LinkedListNode &#123; value: 3, next: null &#125;, length: 1 &#125;</span><br><span class="line">LinkedList &#123;</span><br><span class="line">  head:</span><br><span class="line">   LinkedListNode &#123; value: 3, next: LinkedListNode &#123; value: 4, next: null &#125; &#125;,</span><br><span class="line">  length: 2 &#125;</span><br><span class="line">LinkedListNode &#123; value: 4, next: null &#125;</span><br><span class="line">LinkedList &#123; head: LinkedListNode &#123; value: 3, next: null &#125;, length: 1 &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/LinkedList.js" target="_blank" rel="noopener"></a><br><a href="https://www.zerocho.com/category/Algorithm/post/58008a628475ed00152d6c4d" target="_blank" rel="noopener"></a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="datastructure" scheme="http://qweqwe9ab.github.io/tags/datastructure/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="linkedlist" scheme="http://qweqwe9ab.github.io/tags/linkedlist/"/>
    
  </entry>
  
  <entry>
    <title>REST API</title>
    <link href="http://qweqwe9ab.github.io/2019/01/17/Rest-API/"/>
    <id>http://qweqwe9ab.github.io/2019/01/17/Rest-API/</id>
    <published>2019-01-17T08:12:02.000Z</published>
    <updated>2019-01-17T08:27:31.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><ul><li>REST (Representational State Transfer)</li><li>web의 장점을 최대한 활용할 수 있는 아키텍쳐</li></ul><h2 id="HTTP-메서드"><a href="#HTTP-메서드" class="headerlink" title="HTTP 메서드"></a>HTTP 메서드</h2><table><thead><tr><th>메서드</th><th>의미</th><th>멱등성</th></tr></thead><tbody><tr><td>POST</td><td>Create</td><td>x</td></tr><tr><td>GET</td><td>Select</td><td>O</td></tr><tr><td>PUT</td><td>Update</td><td>O</td></tr><tr><td>DELETE</td><td>Delete</td><td>O</td></tr></tbody></table><ul><li>멱등성 : 연산을 여러번해도 달라지지 않는것.</li></ul><ul><li>REST는 상태 없이 API를 수행한다 그래서 여러 API를 호출하다 실패시 복구해야 하는데 멱등성 메서드는 복구가 필요없다.</li><li>REST는 리소스 지향으로 모든 것은 명사로 표현한다. </li><li>각 세부 리소스에는 ID를 추가한다.</li></ul><h2 id="REST-API의-특성"><a href="#REST-API의-특성" class="headerlink" title="REST API의 특성"></a>REST API의 특성</h2><ul><li><code>유니폼 인터페이스</code> : 표준만 따르면 어떤 기술이라도 사용가능 </li><li><code>무상태성 / 스테이트리스</code> : 서버는 상태를 저장하지 않으므로 각 API 서버는 들어오는 요청만 수행, 구현이 단순</li><li><code>캐슁가능</code> : HTTP에서 제공하는 캐슁 가능</li><li><code>자체 표현구조</code> : REST API만 보고 쉽게 이해할 수 있다.</li><li><code>Client - Server 구조</code> : 서버는 API를 제공하고 클라이언트는 세션, 로그인 정보등을 직접 관리</li><li><code>계층형 구조</code></li></ul><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design?fbclid=IwAR1wp78e2nz7kCjcQKlR1jzgsBPd1D2D3OK4YAo4XKbBjJnj7WBLnWcAXxo%23organize-the-api-around-resources" target="_blank" rel="noopener">API 디자인</a><br><a href="https://meetup.toast.com/posts/92" target="_blank" rel="noopener">REST API 제대로 알고 사용하기</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;REST-API&quot;&gt;&lt;a href=&quot;#REST-API&quot; class=&quot;headerlink&quot; title=&quot;REST API&quot;&gt;&lt;/a&gt;REST API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;REST (Representational State Transfer)&lt;/
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Etc" scheme="http://qweqwe9ab.github.io/categories/Dev/Etc/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="이직" scheme="http://qweqwe9ab.github.io/tags/%EC%9D%B4%EC%A7%81/"/>
    
      <category term="restapi" scheme="http://qweqwe9ab.github.io/tags/restapi/"/>
    
  </entry>
  
  <entry>
    <title>http와 https</title>
    <link href="http://qweqwe9ab.github.io/2019/01/17/http-vs-https/"/>
    <id>http://qweqwe9ab.github.io/2019/01/17/http-vs-https/</id>
    <published>2019-01-17T07:15:54.000Z</published>
    <updated>2019-01-17T08:25:29.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><h2 id="http-Hyper-Text-Transfer-Protocol"><a href="#http-Hyper-Text-Transfer-Protocol" class="headerlink" title="http (Hyper Text Transfer Protocol)"></a>http (Hyper Text Transfer Protocol)</h2><ul><li>Client와 Server가 메세지를 주고 받는 통신 규약</li><li><code>http://</code>로 시작</li><li>메세지를 암호화 하지 않음</li></ul><h2 id="https-Hyper-Text-Transfer-Protocol-Secure-Socket-Layer"><a href="#https-Hyper-Text-Transfer-Protocol-Secure-Socket-Layer" class="headerlink" title="https (Hyper Text Transfer Protocol Secure Socket Layer)"></a>https (Hyper Text Transfer Protocol Secure Socket Layer)</h2><ul><li>Client와 Server가 메세지를 주고 받는 통신 규약</li><li><code>https://</code>로 시작</li><li>메세지를 <code>암호화</code>함</li><li>공개키, 개인키 암호화</li><li>SSL 인증서 구입 비용과 갱신 비용이 비싸다</li><li>암호화로 속도가 느리다</li></ul><h3 id="Related-Posts-1"><a href="#Related-Posts-1" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related-Posts&quot; class=&quot;headerlink&quot; title=&quot;Related Posts&quot;&gt;&lt;/a&gt;Related Posts&lt;/h3&gt;&lt;h2 id=&quot;http-Hyper-Text-Trans
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Etc" scheme="http://qweqwe9ab.github.io/categories/Dev/Etc/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="이직" scheme="http://qweqwe9ab.github.io/tags/%EC%9D%B4%EC%A7%81/"/>
    
      <category term="http" scheme="http://qweqwe9ab.github.io/tags/http/"/>
    
      <category term="https" scheme="http://qweqwe9ab.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조][자바스크립트] 큐(Queue)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/16/Javascript-Queue/"/>
    <id>http://qweqwe9ab.github.io/2019/01/16/Javascript-Queue/</id>
    <published>2019-01-16T08:40:01.000Z</published>
    <updated>2019-01-17T11:07:38.182Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        enqueue(item) &#123;</span><br><span class="line">            queue.unshift(item);</span><br><span class="line">        &#125;,</span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.pop();</span><br><span class="line">        &#125;,</span><br><span class="line">        peek() &#123;</span><br><span class="line">            <span class="keyword">return</span> queue[queue.length <span class="number">-1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        get length() &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.length;</span><br><span class="line">        &#125;,</span><br><span class="line">        isEmpty() &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.length === <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> q = createQueue();</span><br><span class="line">q.enqueue(<span class="number">1</span>);</span><br><span class="line">q.enqueue(<span class="number">2</span>);</span><br><span class="line">q.enqueue(<span class="number">3</span>);</span><br><span class="line">q.enqueue(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(q.isEmpty());</span><br><span class="line"><span class="built_in">console</span>.log(q.length)</span><br><span class="line"><span class="built_in">console</span>.log(q.dequeue());</span><br><span class="line"><span class="built_in">console</span>.log(q.length)</span><br><span class="line"><span class="built_in">console</span>.log(q.peek())</span><br><span class="line"><span class="built_in">console</span>.log(q.length)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="datastructure" scheme="http://qweqwe9ab.github.io/tags/datastructure/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="queue" scheme="http://qweqwe9ab.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조][자바스크립트] 스택(Stack)</title>
    <link href="http://qweqwe9ab.github.io/2019/01/16/Javascript-Stack/"/>
    <id>http://qweqwe9ab.github.io/2019/01/16/Javascript-Stack/</id>
    <published>2019-01-16T08:39:50.000Z</published>
    <updated>2019-01-17T11:07:40.093Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        push(item) &#123;</span><br><span class="line">            stack.push(item);</span><br><span class="line">        &#125;,</span><br><span class="line">        pop() &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.pop();</span><br><span class="line">        &#125;,</span><br><span class="line">        peek() &#123;</span><br><span class="line">            <span class="keyword">return</span> stack[stack.length - <span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        get length() &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.length;</span><br><span class="line">        &#125;,</span><br><span class="line">        isEmpty() &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.length === <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = createStack();</span><br><span class="line">s.push(<span class="number">1</span>);</span><br><span class="line">s.push(<span class="number">2</span>);</span><br><span class="line">s.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.length)</span><br><span class="line"><span class="built_in">console</span>.log(s.peek());</span><br><span class="line"><span class="built_in">console</span>.log(s.pop());</span><br><span class="line"><span class="built_in">console</span>.log(s.length)</span><br><span class="line"><span class="built_in">console</span>.log(s.pop())</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="datastructure" scheme="http://qweqwe9ab.github.io/tags/datastructure/"/>
    
      <category term="interview" scheme="http://qweqwe9ab.github.io/tags/interview/"/>
    
      <category term="stack" scheme="http://qweqwe9ab.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>2019년도 계획.</title>
    <link href="http://qweqwe9ab.github.io/2019/01/14/2019-Plan/"/>
    <id>http://qweqwe9ab.github.io/2019/01/14/2019-Plan/</id>
    <published>2019-01-14T09:07:26.000Z</published>
    <updated>2019-01-17T19:10:15.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018"><a href="#2018" class="headerlink" title="2018.."></a>2018..</h2><p>2019년의 계획을 세우기 전에 2018년을 돌아보면 정신적으로 힘들일의 연속이였다.<br>오래 일하던 회사 사정으로 갑자기 이직을 준비해야 하는 상황이 주어졌다.<br>여러 가지 일들로 정신력이 탈탈 털리고 아직 정신을 회복하고 있다.</p><p>그래도 2019년에는 좋은일이 많을 거라고 예상하면서 2019년 계획을 세워보기로 한다.</p><ol><li>이직</li><li>새로운 언어 공부</li><li>javascript 더 집중적으로 공부</li><li>블로그 시작하기</li><li>다이어트</li><li>유튜브 시작하기</li><li>github에 코드 올리기</li><li>개인 프로젝트 진행</li></ol><p>우선 이직이 제일 급한 문제이기 때문에 이직에 관련된 글들을 많이 작성할 예정입니다.<br>면접 질문, 알고리즘, 자료구조 등등</p><p>하루에 하나 정도는 올리는 게 목표인데 어떻게 될지는 모르겠다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018&quot;&gt;&lt;a href=&quot;#2018&quot; class=&quot;headerlink&quot; title=&quot;2018..&quot;&gt;&lt;/a&gt;2018..&lt;/h2&gt;&lt;p&gt;2019년의 계획을 세우기 전에 2018년을 돌아보면 정신적으로 힘들일의 연속이였다.&lt;br&gt;오래 일하던 
      
    
    </summary>
    
      <category term="Etc" scheme="http://qweqwe9ab.github.io/categories/Etc/"/>
    
      <category term="Plan" scheme="http://qweqwe9ab.github.io/categories/Etc/Plan/"/>
    
    
      <category term="etc" scheme="http://qweqwe9ab.github.io/tags/etc/"/>
    
      <category term="plan" scheme="http://qweqwe9ab.github.io/tags/plan/"/>
    
      <category term="2019" scheme="http://qweqwe9ab.github.io/tags/2019/"/>
    
      <category term="계획" scheme="http://qweqwe9ab.github.io/tags/%EA%B3%84%ED%9A%8D/"/>
    
  </entry>
  
  <entry>
    <title>[jstips] 중첩된 조건문 개선 if, switch</title>
    <link href="http://qweqwe9ab.github.io/2019/01/14/improve-nested-conditionals/"/>
    <id>http://qweqwe9ab.github.io/2019/01/14/improve-nested-conditionals/</id>
    <published>2019-01-14T09:04:48.000Z</published>
    <updated>2019-01-18T10:14:29.573Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jstips-animation.gif" alt=""></p><h2 id="중첩된-조건문-개선"><a href="#중첩된-조건문-개선" class="headerlink" title="중첩된 조건문 개선"></a>중첩된 조건문 개선</h2><hr><p><a href="http://www.jstips.co/" target="_blank" rel="noopener">jstips</a>에서 <a href="http://www.jstips.co/en/javascript/improve-nested-conditionals/" target="_blank" rel="noopener">javascript를 사용할 때 중첩된 <strong>if</strong>문을 조금 더 깔끔하고 효율적으로 만들 수 있을지</a>에 대해서 읽었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (color) &#123;</span><br><span class="line">  <span class="keyword">if</span> (color === <span class="string">'black'</span>) &#123;</span><br><span class="line">    printBlackBackground();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'red'</span>) &#123;</span><br><span class="line">    printRedBackground();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'blue'</span>) &#123;</span><br><span class="line">    printBlueBackground();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'green'</span>) &#123;</span><br><span class="line">    printGreenBackground();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printYellowBackground();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선 중첩된 <strong>if</strong>문을 개선하는 방법 중에 하나는 <strong>switch</strong>문을 사용하는 것입니다.<br><strong>switch</strong>문을 사용하면 더 짧고 깔끔하게 만들 수 잇지만 <strong>break;</strong>를 생략하는 것과 같은 오류를 디버깅하기에 어렵기 때문에 사용하지 않는 것이 좋습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(color) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'black'</span>:</span><br><span class="line">    printBlackBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">    printRedBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'blue'</span>:</span><br><span class="line">    printBlueBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'green'</span>:</span><br><span class="line">    printGreenBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    printYellowBackground();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>조건문에 여러 가지 조건이 들어가는 경우에도 조건문을 짧고 깔끔하게 쓰고 싶다면 switch를 사용할 수 있습니다.<br>이 경우에는 <strong>switch</strong>문의 파라미터로 <strong>true</strong>를 넣고, <strong>case</strong>에 아래처럼 조건을 넣으면 가능합니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'black'</span>):</span><br><span class="line">    printBlackBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'red'</span>):</span><br><span class="line">    printRedBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'blue'</span>):</span><br><span class="line">    printBlueBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'green'</span>):</span><br><span class="line">    printGreenBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'yellow'</span>):</span><br><span class="line">    printYellowBackground();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>리팩토링 같은 걸 생각할 필요가 없다면, 각 색의 함수를 만드는 것 대신에 색을 인수로 갖는 함수를 만들어서 해결할 수도 있습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printBackground</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!color || <span class="keyword">typeof</span> color !== <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// Invalid color, return immediately</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>그러나 만약 리팩토링도 생각해야 한다면, 여러번 조건을 확인하고 <strong>swtich</strong>문을 사용하는 것을 피해야 합니다. </p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><hr><p>중첩된 <strong>if</strong>문을 개선하는 가장 효율 적인 방법은 object를 사용하는 방법입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> colorObj = &#123;</span><br><span class="line">  <span class="string">'black'</span>: printBlackBackground,</span><br><span class="line">  <span class="string">'red'</span>: printRedBackground,</span><br><span class="line">  <span class="string">'blue'</span>: printBlueBackground,</span><br><span class="line">  <span class="string">'green'</span>: printGreenBackground,</span><br><span class="line">  <span class="string">'yellow'</span>: printYellowBackground</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (color <span class="keyword">in</span> colorObj) &#123;</span><br><span class="line">  colorObj[color]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jstips-animation.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;중첩된-조건문-개선&quot;&gt;&lt;a href=&quot;#중첩된-조건문-개선&quot; class=&quot;headerlink&quot; title=&quot;중첩된 조건문 개선&quot;&gt;&lt;/a&gt;중
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="jstips" scheme="http://qweqwe9ab.github.io/tags/jstips/"/>
    
  </entry>
  
  <entry>
    <title>[jstips] 배열에 요소 추가하기 push(),concat(),unshift()</title>
    <link href="http://qweqwe9ab.github.io/2019/01/14/insert-item-inside-an-array/"/>
    <id>http://qweqwe9ab.github.io/2019/01/14/insert-item-inside-an-array/</id>
    <published>2019-01-14T09:01:39.000Z</published>
    <updated>2019-01-17T11:07:27.101Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jstips-animation.gif" alt=""><br>오늘은 jstips에서 첫 번째 팁인 배열에 요소 추가하는 방법을 공부해보겠습니다.</p><p>저도 개발을 하다 보면 배열에 요소를 추가하는 작업을 많이 하게 되는데, push()를 사용해서 배열의 끝에 요소를 넣고, unshift를 사용해서 배열의 시작 부분에 요소를 넣고, splice를 사용해서 배열의 중간에 요소를 넣는 것은 알고 그렇게 작업을 했었습니다.<br>근데 jstips에서 글을 읽으면서 속도와 성능을 생각하면서 작업을 하는 것도 필요할 것 같다는 생각이 들었습니다.</p><p>귀찮은 분들을 위해 맨 아래에 결론을 적어놨습니다!</p><h3 id="배열의-끝부분에-추가"><a href="#배열의-끝부분에-추가" class="headerlink" title="배열의 끝부분에 추가"></a>배열의 끝부분에 추가</h3><hr><p>배열의 끝에 요소를 추가하는 방법 중 제일 쉬운 방법은 <a href="https://msdn.microsoft.com/ko-kr/library/6d0cbb1w(v=vs.94" target="_blank" rel="noopener">push()</a>.aspx)를 사용하는 것인데, 다른 방법들도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">6</span>);</span><br><span class="line">arr[arr.length] = <span class="number">6</span>;</span><br><span class="line">arr2 = arr.concat([<span class="number">6</span>]); <span class="comment">// concat은 배열을 반환한다.</span></span><br></pre></td></tr></table></figure><h4 id="모바일에서의-성능"><a href="#모바일에서의-성능" class="headerlink" title="모바일에서의 성능"></a>모바일에서의 성능</h4><p>Android (v.4.2.2)</p><ol><li>arr.push(6); and arr[arr.length] = 6; 비슷한 성능을 보인다. //3,319,694 ops/sec</li><li>arr2 = arr.concat([6[); 다른 두가지 방법보다 50ㅋ.61% 느리다.</li></ol><p>Chrome Mobile (v33.0.0)</p><ol><li>arr[arr.length] = 6; //6,125,975 ops/sec</li><li>arr.push(6);  66.74% 느리다.</li><li>arr2 = arr.concat([6]);  49.78% 느리다.</li></ol><p>Safari Mobile (v9)</p><ol><li>arr[arr.length] = 6; //7,452,898 ops/sec</li><li>arr.push(6); 40.19 % 느리다.</li><li>arr2 = arr.concat([6]); 49.78% 느리다.</li></ol><h4 id="최종-순위"><a href="#최종-순위" class="headerlink" title="최종 순위"></a>최종 순위</h4><ol><li>arr[arr.length] = 6; //평균 5,632,856 ops/sec</li><li>arr.push(6); // 35.64% 더 느리다.</li><li>arr2 = arr.concat([6]); // 62.67% 더 느리다.</li></ol><h4 id="데스크탑에서의-성능"><a href="#데스크탑에서의-성능" class="headerlink" title="데스크탑에서의 성능"></a>데스크탑에서의 성능</h4><p>Chrome (v48.0.2564)</p><ol><li>arr[arr.length] = 6; // 21,601,722 ops/sec</li><li>arr.push(6); 61.94 % 더 느리다.</li><li>arr2 = arr.concat([6]); 87.45% 더 느리다.</li></ol><p>Firefox (v44)</p><ol><li>arr[arr.length] = 6; //56,032,805 ops/sec</li><li>arr.push(6); 0.52 % 더 느리다.</li><li>arr2 = arr.concat([6]); 87.36% 더 느리다.</li></ol><p>IE (v11)</p><ol><li>arr[arr.length] = 6; //67,197,046 ops/sec</li><li>arr.push(6); 39.61 % 더 느리다.</li><li>arr2 = arr.concat([6]); 93.41% 더 느리다.</li></ol><p>Opera (v35.0.2066.68)</p><ol><li>arr[arr.length] = 6; // 30,775,071 ops/sec</li><li>arr.push(6); 71.60 % 더 느리다.</li><li>arr2 = arr.concat([6]); 83.70% 더 느리다.</li></ol><p>Safari (v9.0.3)</p><ol><li>arr[arr.length] = 6; //42,670,978 ops/sec</li><li>arr.push(6); 0.80 % 더 느리다.</li><li>arr2 = arr.concat([6]); 76.07% 더 느리다.</li></ol><h4 id="최종-순위-1"><a href="#최종-순위-1" class="headerlink" title="최종 순위"></a>최종 순위</h4><ol><li>arr[arr.length] = 6; //평균 42,345,449 ops/sec</li><li>arr.push(6); //34.66 % 더 느리다.</li><li>arr2 = arr.concat([6]); //85.79% 더 느리다.</li></ol><h3 id="배열의-앞부분에-추가"><a href="#배열의-앞부분에-추가" class="headerlink" title="배열의 앞부분에 추가"></a>배열의 앞부분에 추가</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">0</span>);</span><br><span class="line">[<span class="number">0</span>].concat(arr);</span><br></pre></td></tr></table></figure><p>여기서 주의할 점은 unshift는 원래의 배열을 수정하고, concat은 새로운 배열을 반환한다.</p><h4 id="모바일에서의-성능-1"><a href="#모바일에서의-성능-1" class="headerlink" title="모바일에서의 성능"></a>모바일에서의 성능</h4><p>Android (v4.2.2)</p><ol><li>[0].concat(arr); // 1,808,717 ops/sec</li><li>arr.unshift(0); 98.85% 더 느리다.</li></ol><p>Chrome Mobile (v33.0.0)</p><ol><li>[0].concat(arr); // 1,269,498 ops/sec</li><li>arr.unshift(0); 99.86% 더 느리다.</li></ol><p>Safari Mobile(v9)</p><ol><li>[0].concat(arr); // 3,250,184 ops/sec</li><li>arr.unshift(0); 33.67% 더 느리다.</li></ol><h4 id="최종-순위-2"><a href="#최종-순위-2" class="headerlink" title="최종 순위"></a>최종 순위</h4><p>1.[0].concat(arr); //평균 4,972,622 ops/sec<br>2.arr.unshift(0); // 64.70% 더 느리다.</p><h4 id="데스크탑에서의-성능-1"><a href="#데스크탑에서의-성능-1" class="headerlink" title="데스크탑에서의 성능"></a>데스크탑에서의 성능</h4><p>Chrome (v48.0.2564)</p><ol><li>[0].concat(arr); // 2,656,685 ops/sec</li><li>arr.unshift(0); 96.77% 더 느리다.</li></ol><p>Firefox (v44)</p><ol><li>[0].concat(arr); // 8,039,759 ops/sec</li><li>arr.unshift(0); 99.72% 더 느리다.</li></ol><p>IE (v11)</p><ol><li>[0].concat(arr); // 3,604,226 ops/sec</li><li>arr.unshift(0); 98.31% 더 느리다.</li></ol><p>Opera (v35.0.2066.68)</p><ol><li>[0].concat(arr); // 4,102,128 ops/sec</li><li>arr.unshift(0); 97.44% 더 느리다.</li></ol><p>Safari (v9.0.3)</p><ol><li>[0].concat(arr); // 12,356,477 ops/sec</li><li>arr.unshift(0); 15.17% 더 느리다.</li></ol><h4 id="최종-순위-3"><a href="#최종-순위-3" class="headerlink" title="최종 순위"></a>최종 순위</h4><p>1.[0].concat(arr); // 평균 6,032,573 ops/sec<br>2.arr.unshift(0); // 78.65% 더 느리다.</p><h3 id="배열의-중간에-추가"><a href="#배열의-중간에-추가" class="headerlink" title="배열의 중간에 추가"></a>배열의 중간에 추가</h3><hr><p>배열의 중간에 요소를 삽입하는 방법중 splice가 제일 쉽고 가장 효율적인 방법이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>];</span><br><span class="line">items.splice(itmes.length/<span class="number">2</span>, <span class="number">0</span>,<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure></p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>배열의 맨 뒤에 추가할 때는 arr[arr.length]를 사용.<br>배열의 맨 앞에 추가할 때는 concat을 사용.<br>배열 중간에 추가할 때는 splice을 사용.</p><p>참고<br><a href="http://www.jstips.co/en/javascript/insert-item-inside-an-array/" target="_blank" rel="noopener">insert-item-inside-an-array</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">concat</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">unshift</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">push</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jstips-animation.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;오늘은 jstips에서 첫 번째 팁인 배열에 요소 추가하는 방법을 공부해보겠습니다.&lt;/p&gt;
&lt;p&gt;저도 개발을 하다 보면 배열에 요소를 추가하는 작업을 많이
      
    
    </summary>
    
      <category term="Dev" scheme="http://qweqwe9ab.github.io/categories/Dev/"/>
    
      <category term="Javascript" scheme="http://qweqwe9ab.github.io/categories/Dev/Javascript/"/>
    
    
      <category term="dev" scheme="http://qweqwe9ab.github.io/tags/dev/"/>
    
      <category term="javascript" scheme="http://qweqwe9ab.github.io/tags/javascript/"/>
    
      <category term="jstips" scheme="http://qweqwe9ab.github.io/tags/jstips/"/>
    
  </entry>
  
</feed>
